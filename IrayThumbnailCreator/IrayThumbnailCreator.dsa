// DAZ Studio version 4.12  filetype DAZ Script
//=====================================================
// Name: Iray Thumbnail Creator
// Author: butaixianran
// Version: 0.2
// Descr:
//     Render an iray image as current scene or user selected preset file's thumbnail
// How it works:
//     This script will let user to select:
//         * create thumbnail for current scene
//         * or create thumbnail for selected file from Content Library (You need to set this script as an action and trigger it from menu) 
//     then, script will save current render setting and change render setting to render an .png image with size 512x512 as your file's thumbnail.
//     after that, script will restore render setting.
//
// MIT License
//=====================================================


// ----define global  variable----

// script info
var programName = "IrayThumbnailCreator";
var versionName = "v1";
var thumbnailSize = 512;
var maxSamples = 100;

// user selected file path or scene file path
var userfile = "";

//==================================================================
// create dialog
// refer: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dialog_dz
//==================================================================
var wDlg = new DzDialog;
wDlg.caption = programName + " " + versionName;

// create basic group
var gb = new DzVGroupBox( wDlg );

// create a group for main area
var gbBrowse = new DzVGroupBox( gb );
gbBrowse.margin = 5;
gbBrowse.spacing = 5;

var wLblDescr = new DzLabel( gbBrowse );
wLblDescr.text = "Create thumbnail for: ";

var wGetSceneFileBtn = addButtonToGB( gb, "Current Scene", CreateThumbnailForSceneFile );

var wGetSeletedFileBtn = addButtonToGB( gb, "Selected File from Content Library", CreateThumbnailForSeletedFile );

// create a group for bottom area
var bottomGB = new DzGroupBox( gb );
// make this group shows as a line
bottomGB.flat = true;

var wCancelBtn = new DzPushButton( bottomGB );
wCancelBtn.text = "&Cancel";
wDlg.setRejectButton( wCancelBtn );



wDlg.minWidth = 200;
wDlg.minHeight = 120;

wDlg.exec();




//==================================================================
// add a button to gb, set its text to text, connect it to func
//==================================================================
function addButtonToGB( gb, text, func )
{
    var wButton = new DzPushButton( gb );
    wButton.text = text;
    connect( wButton, "clicked()", func );
    return( wButton );
}


//==================================================================
// use scene file path as user file path
//==================================================================
function CreateThumbnailForSceneFile() {
    debug("CreateThumbnailForSceneFile start");

    //close dialog
    wDlg.close();

    userfile = Scene.getFilename();
    debug("userfile: ", userfile);

    //check user scene file
    if (!userfile) {
        MessageBox.critical("You need to save your scene first.", "No scene file", "&OK");

        debug("can't not find scene file, return");
        return;
    }

    debug("CreateThumbnailForSceneFile end");

    CreateIrayThumbnail();

}


//==================================================================
// use selected preset file path as user file path
// refer: https://www.daz3d.com/forums/discussion/28458/browsing-to-file-location-using-script
//==================================================================
function CreateThumbnailForSeletedFile() {
    debug("CreateThumbnailForSeletedFile start");

    //close dialog
    wDlg.close();

    // get Content Library Pane
    var oPaneMgr = MainWindow.getPaneMgr();
    var oPane = oPaneMgr.findPane("DzContentLibraryPane");

    if (!oPane) {
        MessageBox.critical("Can not find Content Library Pane.", "No CL Pane", "&OK");
        debug("can't not find Content Library Pane, return");
        return;
    }

    //get all selected items
    var aAssets = oPane.getSelectedAssets();

    if (!aAssets) {
        MessageBox.critical("Can not find selected asset from Content Library.", "No asset is select", "&OK");
        debug("can't not find seleted asset, return");
        return;
    }

    if (aAssets.length < 1) {
        MessageBox.critical("You need to select a preset file from Content Library.", "No file is select", "&OK");
        debug("can't not find seleted file, return");
        return;
    }

    //use the first selected item as user selected file.
    userfile = aAssets[0].getAsLocalFile();
    debug("userfile: ", userfile);

    //check user scene file
    if (!userfile) {
        MessageBox.critical("Can not get selected file path.", "No file path", "&OK");

        debug("can't not find seleted file path, return");
        return;
    }

    debug("CreateThumbnailForSeletedFile end");

    CreateIrayThumbnail();

}



//==================================================================
// create iray thumb nail
//==================================================================
function CreateIrayThumbnail() {
    debug("CreateIrayThumbnail start");

    //check user scene file
    if (!userfile) {
        debug("userfile is empty, return");
        return;
    }


    //------------
    // get and save current render setting
    //------------
    var oRenderMgr = App.getRenderMgr();

    // Get a pointer to the default DzRenderOptions object
    var oRenderOptions = oRenderMgr.getRenderOptions();

    // save render options
    var bCurrentFrame = oRenderOptions.isCurrentFrameRender;
    var bConstrain = oRenderOptions.isAspectConstrained;
    var sizeImage = oRenderOptions.imageSize;

    var iMaxSamples = GetMaxSamples();
    var bRenderingQualityEnable = GetRenderingQualityEnable();
    var iPostDenoiserStartIteration = GetPostDenoiserStartIteration();


    //save aspect
    var nAspect = oRenderOptions.aspect;
    var nAspectWidth = 1;
    var nAspectHeight = 1;
    // If the app version is greater than 4.6.4.4
    if( App.version64 > 0x0004000600040004 ){
        // Get the aspect width and height
        nAspectWidth = oRenderOptions.aspectWidth;
        nAspectHeight = oRenderOptions.aspectHeight;
    // If the app version is 4.6.4.4 or earlier
    } else {
        // Get the aspect width and height based on image size
        if( sizeImage.width > sizeImage.height ){
            nAspectWidth = nAspect;     
        } else if( sizeImage.height > sizeImage.width ){
            nAspectHeight = nAspect;
        }
    }
    debug("nAspectWidth: ", nAspectWidth);
    debug("nAspectHeight: ", nAspectHeight);


    // Get the target for the image rendering operation
    // It's an Enumerator: DzRenderOptions.DirectToFile
    // values: ActiveView, NewWindow, DirectToFile
    var renderTarget = oRenderOptions.renderImgToId;

    // get render file name, with path.
    var renderFilename = oRenderOptions.renderImgFilename;
    debug("renderFilename: ", renderFilename);

    //------------
    // change render setting to render a thumbnail
    //------------

    //set to render only current frame
    oRenderOptions.isCurrentFrameRender = true;

    //set aspect
    oRenderOptions.isAspectConstrained = false;
    oRenderOptions.setAspectRatio(1, 1);

    //set render image size to thumbnailSize
    oRenderOptions.imageSize = new Size(thumbnailSize, thumbnailSize);

    //set render operation to Direct to file
    oRenderOptions.renderImgToId = DzRenderOptions.DirectToFile;

    //set render file name as userfile+.png
    oRenderOptions.renderImgFilename = userfile+".png";
    debug("oRenderOptions.renderImgFilename: ", oRenderOptions.renderImgFilename);

    //set Rendering Quality Enable
    SetRenderingQualityEnable(false);

    //set Max Samples
    SetMaxSamples(maxSamples);

    //set Post Denoiser Start Iteration
    SetPostDenoiserStartIteration(maxSamples);


    //-------------------
    // render thumbnail
    //-------------------
    debug("rendering start");
    oRenderMgr.doRender();
    debug("rendering end");

    //-------------------
    // Restore render options
    // try not change the order of following settings
    //-------------------
    oRenderOptions.isCurrentFrameRender = bCurrentFrame;

    oRenderOptions.setAspectRatio(nAspectWidth, nAspectHeight);
    oRenderOptions.imageSize = sizeImage;
    oRenderOptions.isAspectConstrained = bConstrain;

    oRenderOptions.renderImgFilename = renderFilename;

    oRenderOptions.renderImgToId = renderTarget;

    if (iMaxSamples) {
        SetMaxSamples(iMaxSamples);
    }

    if (bRenderingQualityEnable) {
        SetRenderingQualityEnable(bRenderingQualityEnable)
    }

    if (iPostDenoiserStartIteration) {
        SetPostDenoiserStartIteration(iPostDenoiserStartIteration)
    }

    debug("CreateIrayThumbnail end");


}



//==================================================================
// Get Iray's Max Samples value
//==================================================================
function GetMaxSamples() {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Max Samples", false, true );
    if(oProperty) {
        debug("Max Samples: ", oProperty.getValue());
        return oProperty.getValue();
    } else {
        return 0;
    }
}



//==================================================================
// Set Iray's Max Samples value
//==================================================================
function SetMaxSamples(iValue) {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Max Samples", false, true );
    if(oProperty) {
        oProperty.setValue(iValue);
    }
}

//==================================================================
// Get Iray's Rendering Quality Enable
//==================================================================
function GetRenderingQualityEnable() {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Rendering Quality Enable", false, true );
    if(oProperty) {
        debug("Rendering Quality Enable: ", oProperty.getBoolValue());
        return oProperty.getBoolValue();
    } else {
        return false;
    }

}



//==================================================================
// Set Iray's Rendering Quality Enable
//==================================================================
function SetRenderingQualityEnable(bValue) {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Rendering Quality Enable", false, true );
    if(oProperty) {
        oProperty.setBoolValue(bValue);
    }
}


//==================================================================
// Get Iray's Post Denoiser Start Iteration value
//==================================================================
function GetPostDenoiserStartIteration() {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Post Denoiser Start Iteration", false, true );
    if(oProperty) {
        debug("Post Denoiser Start Iteration: ", oProperty.getValue());
        return oProperty.getValue();
    } else {
        return 0;
    }
}



//==================================================================
// Set Iray's Post Denoiser Start Iteration value
//==================================================================
function SetPostDenoiserStartIteration(iValue) {
    var oProperty = findRendererProperty( "DzIrayRenderer", "", "Post Denoiser Start Iteration", false, true );
    if(oProperty) {
        oProperty.setValue(iValue);
    }
}


//==================================================================
// Find A Property From a Pane
// refer: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/rendering/render_settings_find_property/start
//==================================================================

/*********************************************************************/
// Array<DzProperty> : A function for getting a list of the properties in a group
function getGroupProperties( oGroup, bTraverse, bRecurse )
{
    // Declare an array to hold properties
    var aProperties = [];

    // If a group is not passed in
    if( !oGroup ){
        // We are done, return an empty array
        return aProperties;
    }

    // Get the number of proeprties in the group
    var nProperties = oGroup.getNumProperties();
    // Pre-size the properties array
    aProperties = new Array( nProperties );
    // Iterate over the properties, setting each element in the array
    for( var i = 0; i < nProperties; i += 1 ){
        // Assign the property to the position in the array
        aProperties[ i ] = oGroup.getProperty( i );
    }

    // If we are recursing
    if( bRecurse ){
        // Concatenate the properties array from child groups
        aProperties = aProperties.concat(
            getGroupProperties( oGroup.getFirstChild(), true, bRecurse ) );
    }

    // If we are traversing
    if( bTraverse ){
        // Concatenate the properties array from sibling groups
        aProperties = aProperties.concat(
            getGroupProperties( oGroup.getNextSibling(), bTraverse, bRecurse ) );
    }

    // Return the array of properties
    return aProperties;
};

/*********************************************************************/
// Array<DzProperty> : A function for getting the list properties for an element
function getElementProperties( oElement, bTraverse, bRecurse )
{
    // Get the property group tree for the element
    var oPropertyGroupTree = oElement.getPropertyGroups();

    // If the application version is 4.9.4.101 or newer and we want all properties
    if( App.version64 >= 0x0004000900040065 && bTraverse && bRecurse ){
        // Return the properties for the element
        return oPropertyGroupTree.getAllProperties();
    }

    // Get the first group in the tree
    var oPropertyGroup = oPropertyGroupTree.getFirstChild();
    // Return the properties for the element
    return getGroupProperties( oPropertyGroup, bTraverse, bRecurse );
};

/*********************************************************************/
// DzProperty : A function for finding a property associated with an element
function findElementProperty( oElement, sProperty, bUseLabel )
{
    // Whether or not to use optimizations; 4.7.1.44 or newer
    var bUseOptimization = (App.version64 >= 0x000400070001002c);

    // Declare a working variable
    var oProperty;

    // If the application version is 4.7.1.44 or newer and we are not using
    // the label to find, or the application version is 4.11.0.166 or newer
    if( (bUseOptimization && !bUseLabel) ||
        App.version64 >= 0x0004000b000000a6 ){
        // Get the property group tree for the element
        var oPropertyGroupTree = oElement.getPropertyGroups();

        // If we are using the label
        if( bUseLabel ){
            // Attempt to find the property
            oProperty = oPropertyGroupTree.findPropertyByLabel( sProperty );
        // If we are not using the label
        } else {
            // Attempt to find the property
            oProperty = oPropertyGroupTree.findProperty( sProperty );
        }

        // If we found a property
        if( oProperty ){
            // We are done, return it
            return oProperty;
        }
    // Otherwise
    } else {
        // Get the properties of the element
        var aProperties = getElementProperties( oElement, true, true );
        // Iterate over the properties
        for( var i = 0; i < aProperties.length; i += 1 ){
            // Get the 'current' property
            oProperty = aProperties[i];

            // If we are using the label
            if( bUseLabel ){
                // If the label of the property is the one we are looking for
                if( oProperty.getLabel() == sProperty ){
                    // We are done, return it
                    return oProperty;
                }
            // If we are not using the label
            } else {
                // If the name of the property is the one we are looking for
                if( oProperty.name == sProperty ){
                    // We are done, return it
                    return oProperty;
                }               
            }
        }
    }

    // Declare working variables
    var oChild;

    // Iterate over the child elements
    for( var i = 0, nChildren = oElement.getNumElementChildren(); i < nChildren; i += 1 ){
        // Get the 'current' child element
        oChild = oElement.getElementChild( i );
        // Get the property from the child
        oProperty = findElementProperty( oChild, sProperty, bUseLabel );

        // If we are using a version with optimizations
        if( bUseOptimization ){
            // If we have a property
            if( oProperty ){
                // We are done, return it
                return oProperty;
            }
        // Otherwise
        } else {
            // If we are using the label
            if( bUseLabel ){
                // If the label of the property is the one we are looking for
                if( oProperty.getLabel() == sProperty ){
                    // We are done, return it
                    return oProperty;
                }
            // If we are not using the label
            } else {
                // If the name of the property is the one we are looking for
                if( oProperty.name == sProperty ){
                    // We are done, return it
                    return oProperty;
                }               
            }
        }
    }

    return null;
};

/*********************************************************************/
// DzProperty : A function to find a property associated with a renderer
function findRendererProperty( sRenderer, sElement, sProperty, bUseLabel, bActivate )
{
    // Get the render manager
    var oRenderMgr = App.getRenderMgr();

    // Find the desired renderer
    var oRenderer = oRenderMgr.findRenderer( sRenderer );
    // If we did not find the renderer
    if( !oRenderer ){
        // We are done..
        return null;
    }

    // Get the active renderer
    var oActiveRenderer = oRenderMgr.getActiveRenderer();

    // If we have an active renderer and it is not the one we want
    if( oActiveRenderer && oActiveRenderer.className() != sRenderer ){
        // If we are not activating the renderer
        if( !bActivate ){
            // We are done
            return null;
        }

        // Set the active renderer
        oRenderMgr.setActiveRenderer( oRenderer );
    }

    // Declare working variables
    var oElement, oProperty;

    // Get the render elements; which hold the properties
    var aRenderElements = oRenderMgr.getRenderElementObjects();
    // Iterate over the elements
    for( var i = 0; i < aRenderElements.length; i += 1 ){
        // Get the 'current' element
        oElement = aRenderElements[i];

        // If an element name is specified and the 'current' element is not
        // named as the one we are looking for
        if( !sElement.isEmpty() && oElement.name != sElement ){
            // Next!
            continue;
        }

        // Find a specific property by name
        oProperty = findElementProperty( oElement, sProperty, bUseLabel );
        // If we found a property
        if( oProperty ){
            // We are done, return it
            return oProperty;
        }
    }

    return null;
};

debug("done");


